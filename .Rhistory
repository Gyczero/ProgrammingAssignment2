B <- matrix(1:9, nrow = 3, ncol = )
3
B <- matrix(1:9, nrow = 3, ncol = 3)
B
solve(B)
B
class(B)
B''
B'
s
s
s
s
q
q
q
quit
?<<-
help(<-)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
B <- matrix(1:9, nrow = 3, ncol = 3)
B
B[2,3] <- 8
B
cacheSolve(B)
a <- makeCacheMatrix(B)
cacheSolve(B)
cacheSolve(a)
cacheSolve(a)
a$getinverse
A
A
a
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
B <- matrix(1:9, nrow = 3, ncol = 3)
B
B[2,2] <- 2
B
makeCacheMatrix(B)
a <- makeCacheMatrix(B)
a
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
